<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chessboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .chessboard {
            display: grid;
            grid-template-columns: repeat(8, minmax(0, 1fr));
            grid-template-rows: repeat(8, minmax(0, 1fr));
            width: 400px;
            height: 400px;
            transform: rotate(0deg);
        }

        .piece.white {
            color: white;
            filter: drop-shadow(0 0 2px rgba(0, 0, 0, 1));
        }

        .piece.black {
            color: black;
        }

        .flipped {
            transform: rotate(180deg);
        }

        .square {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .square.light {
            background-color: #f0d9b5;
        }

        .square.dark {
            background-color: #b58863;
        }

        .piece {
            font-size: 36px;
            cursor: pointer;
        }

        .piece.draggable {
            cursor: grab;
        }

        .dragging {
            opacity: 0.5;
        }

        /* Rotate pieces for black player */
        .flipped .piece {
            transform: rotate(180deg);
        }
    </style>
</head>
<body>
    <div class="w-full h-screen flex items-center justify-center bg-zinc-900">
        <div class="chessboard" id="chessboard"></div>
    </div>

    <h1 class="text-white text-center">Chess Game</h1>

    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js" integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js" integrity="sha512-xRllwz2gdZciIB+AkEbeq+gVhX8VB8XsfqeFbUh+SzHlN96dEduwtTuVuc2u9EROlmW9+yhRlxjif66ORpsgVA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        const socket = io();
        const chess = new Chess();
        const boardElement = document.querySelector(".chessboard");

        let draggedPiece = null;
        let sourceSquare = null;
        let playerRole = 'w'; // 'w' for white, 'b' for black. Set according to your role.

        const renderBoard = () => {
            const board = chess.board();
            boardElement.innerHTML = "";
            board.forEach((row, rowIndex) => {
                row.forEach((square, squareIndex) => {
                    const squareElement = document.createElement("div");
                    squareElement.classList.add("square",
                        (rowIndex + squareIndex) % 2 === 0 ? "light" : "dark"
                    );
                    squareElement.dataset.row = rowIndex;
                    squareElement.dataset.col = squareIndex;

                    if (square) {
                        const pieceElement = document.createElement("div");
                        pieceElement.classList.add("piece", square.color === 'w' ? "white" : "black");
                        pieceElement.innerText = getPieceCode(square.type);
                        pieceElement.draggable = playerRole === square.color;

                        pieceElement.addEventListener("dragstart", (e) => {
                            if (pieceElement.draggable) {
                                draggedPiece = pieceElement;
                                sourceSquare = { row: rowIndex, col: squareIndex };
                                e.dataTransfer.setData("text/plain", "");
                            }
                        });
                        pieceElement.addEventListener("dragend", (e) => {
                            draggedPiece = null;
                            sourceSquare = null;
                        });

                        squareElement.appendChild(pieceElement);
                    }

                    squareElement.addEventListener("dragover", (e) => {
                        e.preventDefault();
                    });

                    squareElement.addEventListener("drop", (e) => {
                        e.preventDefault();
                        if (draggedPiece) {
                            const targetSquare = {
                                row: parseInt(squareElement.dataset.row),
                                col: parseInt(squareElement.dataset.col),
                            };

                            handleMove(sourceSquare, targetSquare);
                        }
                    });
                    boardElement.appendChild(squareElement);
                });
            });
            if(playerRole==='b')
            boardElement.classList.add("flipped");
            else
            boardElement.classList.remove("flipped");
        };

        const handleMove = (source, target) => {
            const sourceSq = `${String.fromCharCode(97 + source.col)}${8 - source.row}`;
            const targetSq = `${String.fromCharCode(97 + target.col)}${8 - target.row}`;
            const move = chess.move({ from: sourceSq, to: targetSq });
            if (move) {
                renderBoard();
                socket.emit("move", move);
            } else {
                console.log("Invalid move:", sourceSq, targetSq);
            }
        };

        const getPieceCode = (piece) => {
            switch (piece) {
                case 'p': return '♙';
                case 'r': return '♜';
                case 'n': return '♞';
                case 'b': return '♝';
                case 'q': return '♛';
                case 'k': return '♚';
                case 'P': return '♟';
                case 'R': return '♖';
                case 'N': return '♘';
                case 'B': return '♗';
                case 'Q': return '♕';
                case 'K': return '♔';
                default: return '';
            }
        };

        socket.on("playerRole",function(role)
    {
        console.log("Player role received:", role);
        playerRole=role;
        renderBoard();
    });

    socket.on("spectatorRole",function()
{
    console.log("Spectator role received");
    playerRole=null;
    renderBoard();
});

socket.on("boardState",function(fen)
{
    console.log("Board state received:", fen);
    chess.load(fen);
    renderBoard();
});
socket.on('move', (move) => {
            console.log("Move received:", move);
            chess.move(move);
            renderBoard();
        });

        renderBoard();
    </script>
</body>
</html>
